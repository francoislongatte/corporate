service: ssrserverless-angular

plugins:
  - serverless-apigw-binary
  - serverless-plugin-custom-domain

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 192
  timeout: 10
  region: eu-west-1
  stackName: ${param:envName}-ssrserverless-angular

package:
  exclude:
    - ./**
  include:
    - 'node_modules/aws-serverless-express/**'
    - 'node_modules/binary-case/**'
    - 'node_modules/type-is/**'
    - 'node_modules/media-typer/**'
    - 'node_modules/mime-types/**'
    - 'node_modules/mime-db/**'
    - 'node_modules/@vendia/**'
    - 'dist/**'
    - 'lambda.js'

custom:
  apigwBinary:
    types:
      - '*/*'

resources:
  Resources:
    SequenceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SequenceClientTable
        AttributeDefinitions:
          - AttributeName: sequenceClientId
            AttributeType: S
        KeySchema:
          - AttributeName: sequenceClientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CustomerTable
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: customerId
                KeyType: HASH
              - AttributeName: email
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

functions:
  api:
    handler: handler/server.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
  saveClient:
    handler: handler/saveClient.handler
    events:
      - http:
          path: /saveClient
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource:
          Fn::GetAtt:
            - CustomerTable
            - Arn
